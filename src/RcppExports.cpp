// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_Polygons2PolySet
Rcpp::DataFrame rcpp_Polygons2PolySet(Rcpp::List polys, std::size_t n_preallocate);
RcppExport SEXP raspr_rcpp_Polygons2PolySet(SEXP polysSEXP, SEXP n_preallocateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type polys(polysSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_preallocate(n_preallocateSEXP);
    __result = Rcpp::wrap(rcpp_Polygons2PolySet(polys, n_preallocate));
    return __result;
END_RCPP
}
// rcpp_append_model_object
Rcpp::List rcpp_append_model_object(Rcpp::List model, Rcpp::List existing_sols);
RcppExport SEXP raspr_rcpp_append_model_object(SEXP modelSEXP, SEXP existing_solsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type existing_sols(existing_solsSEXP);
    __result = Rcpp::wrap(rcpp_append_model_object(model, existing_sols));
    return __result;
END_RCPP
}
// rcpp_calcBoundaryDF
Rcpp::List rcpp_calcBoundaryDF(Rcpp::DataFrame df, double tolerance, double lengthFactor, double edgeFactor);
RcppExport SEXP raspr_rcpp_calcBoundaryDF(SEXP dfSEXP, SEXP toleranceSEXP, SEXP lengthFactorSEXP, SEXP edgeFactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type lengthFactor(lengthFactorSEXP);
    Rcpp::traits::input_parameter< double >::type edgeFactor(edgeFactorSEXP);
    __result = Rcpp::wrap(rcpp_calcBoundaryDF(df, tolerance, lengthFactor, edgeFactor));
    return __result;
END_RCPP
}
// rcpp_extract_model_object
Rcpp::S4 rcpp_extract_model_object(Rcpp::S4 opts, bool unreliable_formulation, Rcpp::S4 data, Rcpp::List model, std::vector<std::string> logging_file, Rcpp::List solution);
RcppExport SEXP raspr_rcpp_extract_model_object(SEXP optsSEXP, SEXP unreliable_formulationSEXP, SEXP dataSEXP, SEXP modelSEXP, SEXP logging_fileSEXP, SEXP solutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< bool >::type unreliable_formulation(unreliable_formulationSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type logging_file(logging_fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type solution(solutionSEXP);
    __result = Rcpp::wrap(rcpp_extract_model_object(opts, unreliable_formulation, data, model, logging_file, solution));
    return __result;
END_RCPP
}
// rcpp_generate_model_object
Rcpp::List rcpp_generate_model_object(Rcpp::S4 opts, bool unreliable_formulation, Rcpp::S4 data, bool verbose);
RcppExport SEXP raspr_rcpp_generate_model_object(SEXP optsSEXP, SEXP unreliable_formulationSEXP, SEXP dataSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< bool >::type unreliable_formulation(unreliable_formulationSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4 >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(rcpp_generate_model_object(opts, unreliable_formulation, data, verbose));
    return __result;
END_RCPP
}
// rcpp_groupcombine
NumericVector rcpp_groupcombine(std::vector<NumericVector> group_means);
RcppExport SEXP raspr_rcpp_groupcombine(SEXP group_meansSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<NumericVector> >::type group_means(group_meansSEXP);
    __result = Rcpp::wrap(rcpp_groupcombine(group_means));
    return __result;
END_RCPP
}
// rcpp_groupmean
NumericVector rcpp_groupmean(IntegerVector cat_vec, NumericVector val_vec);
RcppExport SEXP raspr_rcpp_groupmean(SEXP cat_vecSEXP, SEXP val_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type cat_vec(cat_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val_vec(val_vecSEXP);
    __result = Rcpp::wrap(rcpp_groupmean(cat_vec, val_vec));
    return __result;
END_RCPP
}
